### Polymorphism using method overriding ###

class Animal:
    def speak(self):
        print("Sound of Animal")

class Dog(Animal):
    def speak(self):
        print("wooeooowoooow")

class Cat(Animal):
    def speak(self):
        print("Meooooowowwwoo")

def animalSpeak(Animal):
    Animal.speak()

dog  = Dog()
dog.speak()
cat = Cat()
cat.speak()

animalSpeak(dog)


### Polymorphism using Abstract method ###

from abc import ABC,abstractmethod

class Animal(ABC):
    @abstractmethod
    def speak(self):
        pass
    
class Dog(Animal):
    def speak(self):
        print("Wooewwwwwwww")
        
class Cat(Animal):
    def speak(self):
        print("Meowwwwwww")


cat = Cat()
cat.speak()


##### Encapsulation ########


class Person:
    def __init__(self,name,age):
        self.name = name   # Public variable 
        self.age = age      # Public variable

per = Person("Jaimin","32")
print(per.name)
print(dir(per))


O/p: Jaimin
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__',
'__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__',
'__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__',
'__str__', '__subclasshook__', '__weakref__', 'age', 'name']


class Person:
    def __init__(self,name,age):
        self.__name = name   # Private variable 
        self.__age = age      # Private variable

per = Person("Jaimin","32")
print(dir(per))
print(per.name)

O/p:

['_Person__age', '_Person__name', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__',
'__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__',
'__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']
ERROR!
Traceback (most recent call last):
  File "<main.py>", line 10, in <module>
AttributeError: 'Person' object has no attribute 'name'



class Person:
    def __init__(self,name,age):
        self._name = name   # Protected variable 
        self._age = age      # Protected variable

class Employee(Person):
    def __init__(self,name,age):
        super().__init__(name,age)

per = Employee("Jaimin","32")

def getName(person):
    print(person._name)

print(dir(per))
getName(per)

O/P:

['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__'
, '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__'
, '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_age', '_name']
Jaimin



####### Getter and Setter method to access the private variable using public method ######
This is the defined way using which private variable should be accessed

class Person:
    def __init__(self,name,age):
        self.__name = name   # Private variable 
        self.__age = age      # Private variable
    
    def getName(self):
        return self.__name
    
    def setName(self,name):
        self.__name = name 

per = Person("Jaimin","32")
print(per.getName())
per.setName("Jatin")
print(per.getName())



### Magic method #####
class Person:
    def __init__(self,name,age):
        self.name = name   
        self.age = age      
per = Person("Jaimin",32)
print(per)

O/p: <__main__.Person object at 0x782aa9935460>


class Person:
    def __init__(self,name,age):
        self.name = name   
        self.age = age      
    
    def __str__(self):
        return f"{self.name} and {self.age}"

per = Person("Jaimin",32)
print(per)

O/p:  Jaimin and 32


#  Operator Overloading using magic methods
class Number:
    def __init__(self,x,y):
        self.x  = x
        self.y = y
    
    def __add__(self,other):
        return self.x + other.x, self.y + other.y
    
    def __sub__(self,other):
        return self.x - other.x, self.y - other.y
    
    def __eq__(self, other):
        return self.x == other.x, self.y == other.y
    def __repr__(self):
        return f"({self.x}, {self.y})"
        
    
    
n1 = Number(4,3)
n2 = Number(4,5)

print(n1 + n2)
print(n1 - n2)
print(n1 == n2)


##### Decorator ###### 

def mydecorator(func):
    def mywrapper(a,b):
        if a < b:
            a,b = b,a
        return func(a,b)
    return mywrapper    

@mydecorator
def div(a,b):
    return a/b

print(div(2,8))
    


